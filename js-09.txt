Асинхронність 
setTimeout(() => {console.log("Second log")}, 2000); Функція setTimeout() відпрацьовує синхронно і реєструє відкладений виклик переданої callback-функції, яка буде викликана асинхронно, через вказаний проміжок часу.

Внутрішній таймер-планувальник браузера дозволяє відкладати виклик функції на певний період часу. Тайм-аути та інтервали реалізовані в браузері і доступні на глобальному об'єкті window.

const timerId = setTimeout(callback, delay, arg1, arg2, ...);
Повертає цифровий ідентифікатор створеного таймера, який використовується для його видалення.

метод clearTimeout(id), який приймає ідентифікатор таймера і очищає (видаляє) його.

Метод setInterval() запускає регулярно повторює її через вказаний проміжок часу. Зупинити виконання можна викликом методу clearInterval(id).
const timerId = setInterval(callback, delay, arg1, arg2, ...);

Клас Date дозволяє нам відображати моменти у часі як об'єкти і маніпулювати ними заздалегідь визначеними методами.
Екземпляр об'єкта Date - це об'єкт, що відображає певний момент часу.

Метод getTime() повертає числове значення цієї дати (timestamp) - кількість мілісекунд, що минула з півночі 1 січня 1970 року.

Рядок може описувати тільки дату або дату і час.
const teamMeetingDate = new Date('March 16, 2040');
const preciseTeamMeetingDate = new Date('March 16, 2030 14:25:00');

Інший спосіб створення нових об'єктів - це передати сім чисел, які описують рік, місяць (починається з 0), день, години, хвилини, секунди і мілісекунди. Обов'язкові тільки перші три.
const date = new Date(2030, 2, 16, 14, 25, 0, 0);

const date = new Date();
console.log("Date: ", date);

// Повертає день місяця від 1 до 31
console.log("getDate(): ", date.getDate());
// Повертає день тижня від 0 до 6
console.log("getDay(): ", date.getDay());
// Повертає місяць від 0 до 11
console.log("getMonth(): ", date.getMonth());
// Повертає рік з 4 цифр
console.log("getFullYear(): ", date.getFullYear());
// Повертає години
console.log("getHours(): ", date.getHours());
// Повертає хвилини
console.log("getMinutes(): ", date.getMinutes());
// Повертає секунди
console.log("getSeconds(): ", date.getSeconds());
// Повертає мілісекунди
console.log("getMilliseconds(): ", date.getMilliseconds());

toString(), toDateString() і toTimeString() повертають стандартне рядкове відображення, що не задане жорстко у стандарті, а залежить від браузера. 
console.log('toTimeString: ', date.toTimeString());
console.log('toDateString: ', date.toDateString());


Promise (обіцянка, проміс) - об'єкт, що представляє поточний стан асинхронної операції.
- Очікування (pending) - початковий стан під час створення промісу.
- Виконано (fulfilled) - операція виконана успішно з будь-яким результатом.
- Відхилено (rejected) - операція відхилена з помилкою.

const promise = new Promise((resolve, reject) => {
  // Asynchronous operation
});

- resolve(value) - функція для виклику у разі успішної операції. Переданий їй аргумент буде значенням виконаного промісу.
- reject(error) - функція для виклику у разі помилки. Переданий їй аргумент буде значенням відхиленого промісу.

Метод then() приймає два аргументи - callback-функції, які будуть викликані, коли проміс змінить свій стан. Результат промісу, значення або помилку, вони отримають як аргументи.

promise.then(onResolve, onReject)

- onResolve(value) - буде викликана у разі успішного виконання промісу і отримає його результат як аргумент.
- onReject(error) - буде викликана у разі виконання промісу з помилкою і отримає її як аргумент.


promise
  .then(value => console.log(value)) // "Success! Value passed to resolve function"
  .catch(error => console.log(error)) // "Error! Error passed to reject function"
  .finally(() => console.log("Promise settled")); // "Promise settled"

Більшість сучасних бібліотек ґрунтуються на промісах. У разі виклику методу для асинхронної операції його результат доступний як проміс, якому можна причепити обробники в методах then() і catch().

Promise.all() Приймає масив промісів, очікує їх виконання і повертає проміс.

Promise.race() Повертає виконаний або відхилений проміс, залежно від того, з яким результатом завершиться «найшвидший» з переданих промісів, зі значенням або причиною його відхилення.